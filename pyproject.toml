[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "image-meta-processor"
version = "2.0.0"
description = "AI-powered image metadata processor using Ollama LLaVA model"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Shane Holloman", email = "contact@shaneholloman.com"}
]
maintainers = [
    {name = "Shane Holloman", email = "contact@shaneholloman.com"}
]
keywords = ["image", "metadata", "ai", "ollama", "llava", "xmp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.13"
dependencies = [
    "pyexiv2",
    "requests",
    "colorama",
    "tqdm",
    "pyyaml",
    "python-dotenv",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "ruff",
    "ty",
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
]

[project.urls]
Homepage = "https://github.com/shaneholloman/image-meta-processor"
Repository = "https://github.com/shaneholloman/image-meta-processor.git"
Issues = "https://github.com/shaneholloman/image-meta-processor/issues"

[project.scripts]
image-meta-processor = "image_meta_processor.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/image_meta_processor"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/config",
    "/docs",
    "README.md",
    "LICENSE",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["-v", "--tb=short", "--cov=src", "--cov-report=term-missing"]
markers = [
    "unit: Unit tests that can run anywhere",
    "integration: Tests requiring local setup",
    "requires_ollama: Tests needing Ollama running locally",
]

[tool.ruff]
line-length = 88
target-version = "py313"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip() without strict= parameter
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "src/image_meta_processor/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
